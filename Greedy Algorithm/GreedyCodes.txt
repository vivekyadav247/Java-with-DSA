class Solution {
    public int largestSumAfterKNegations(int[] nums, int k) {
        Arrays.sort(nums);
        int i = 0;
        while(i < nums.length && nums[i] < 0 && k > 0) {
            nums[i] *= -1;
            i++;
            k--;
        }

        if(k % 2 == 1) {
            Arrays.sort(nums);
            nums[0] *= -1;
        }

        int sum = 0;
        for(int s : nums) {
            sum += s;
        }

        return sum;
    }
}

class Solution {
    public int maximumUnits(int[][] boxTypes, int truckSize) {
        Arrays.sort(boxTypes, (a1, a2) -> a2[1] - a1[1]);
        int sum = 0;
        for(int i = 0; i < boxTypes.length; i++) {
            int nb = boxTypes[i][0];
            int un = boxTypes[i][1];
            int min = Math.min(nb, truckSize);
            truckSize -= min;
            sum += min * un;
            if(truckSize == 0) {
                return sum;
            }
        }
        return sum;
    }
}

class Solution {
    public int numRescueBoats(int[] people, int limit) {
        Arrays.sort(people);
        int left = 0, right = people.length - 1;
        int ans = 0;
        while(left <= right) {
            if(people[left] + people[right] <= limit) {
                left++;
                right--;
            } else {
                right--;
            }
            ans++;
        }
        return ans;
    }
}


public class Main {

	public int minimumProductSubsetOfAnArray(int[] a, int n) {
		// TODO Auto-generated method stub
		if (n == 1)
			return a[0];

		int negmax = Integer.MIN_VALUE;
		int posmin = Integer.MAX_VALUE;
		int count_neg = 0, count_zero = 0;
		int product = 1;

		for (int i = 0; i < n; i++) {

			if (a[i] == 0) {
				count_zero++;
				continue;
			}

			if (a[i] < 0) {
				count_neg++;
				negmax = Math.max(negmax, a[i]);
			}

			if (a[i] > 0 && a[i] < posmin)
				posmin = a[i];

			product *= a[i];
		}

		if (count_zero == n || (count_neg == 0 && count_zero > 0))
			return 0;

		if (count_neg == 0)
			return posmin;

		if (count_neg % 2 == 0 && count_neg != 0) {

			product = product / negmax;
		}

		return product;

	}
}

// Java program to solve fractional Knapsack Problem

import java.util.Arrays;
import java.util.Comparator;

// Greedy approach
public class FractionalKnapsack {
	
	// Function to get maximum value
	private static double getMaxValue(ItemValue[] arr,
									int capacity)
	{
		// Sorting items by profit/weight ratio;
		Arrays.sort(arr, new Comparator<ItemValue>() {
			@Override
			public int compare(ItemValue item1,
							ItemValue item2)
			{
				double cpr1
					= new Double((double)item1.profit
								/ (double)item1.weight);
				double cpr2
					= new Double((double)item2.profit
								/ (double)item2.weight);

				if (cpr1 < cpr2)
					return 1;
				else
					return -1;
			}
		});

		double totalValue = 0d;

		for (ItemValue i : arr) {

			int curWt = (int)i.weight;
			int curVal = (int)i.profit;

			if (capacity - curWt >= 0) {

				// This weight can be picked whole
				capacity = capacity - curWt;
				totalValue += curVal;
			}
			else {

				// Item cant be picked whole
				double fraction
					= ((double)capacity / (double)curWt);
				totalValue += (curVal * fraction);
				capacity
					= (int)(capacity - (curWt * fraction));
				break;
			}
		}

		return totalValue;
	}

	// Item value class
	static class ItemValue {

		int profit, weight;

		// Item value function
		public ItemValue(int val, int wt)
		{
			this.weight = wt;
			this.profit = val;
		}
	}

	// Driver code
	public static void main(String[] args)
	{

		ItemValue[] arr = { new ItemValue(60, 10),
							new ItemValue(100, 20),
							new ItemValue(120, 30) };

		int capacity = 50;

		double maxValue = getMaxValue(arr, capacity);

		// Function call
		System.out.println(maxValue);
	}
}

// Java program to divide a 
// board into m*n squares
import java.util.Arrays;
import java.util.Collections;

class  Main
{
	// method returns minimum cost to break board into
	// m*n squares
	static int minimumCostOfBreaking(Integer X[], Integer Y[], int m, int n)
	{
		int res = 0;
	
		// sort the horizontal cost in reverse order
		Arrays.sort(X, Collections.reverseOrder());
	
		// sort the vertical cost in reverse order
		Arrays.sort(Y, Collections.reverseOrder());
	
		// initialize current width as 1
		int hzntl = 1, vert = 1;
	
		// loop until one or both
		// cost array are processed
		int i = 0, j = 0;
		while (i < m && j < n)
		{
			if (X[i] > Y[j])
			{
				res += X[i] * vert;
	
				// increase current horizontal
				// part count by 1
				hzntl++;
				i++;
			}
			else
			{
				res += Y[j] * hzntl;
	
				// increase current vertical 
				// part count by 1
				vert++;
				j++;
			}
		}
	
		// loop for horizontal array, 
		// if remains
		int total = 0;
		while (i < m)
			total += X[i++];
		res += total * vert;
	
		// loop for vertical array, 
		// if remains
		total = 0;
		while (j < n)
			total += Y[j++];
		res += total * hzntl;
	
		return res;
	}
	
	// Driver program
	public static void main(String arg[])
	{
		int m = 6, n = 4;
		Integer X[] = {2, 1, 3, 1, 4};
		Integer Y[] = {4, 1, 2};
		System.out.print(minimumCostOfBreaking(X, Y, m-1, n-1));
	}
}

class Solution {
    public int numRabbits(int[] answers) {
        int ans = 0;
        //3 3 3 3 3 4 4 4 2 2 
        Map<Integer, Integer> freq = new HashMap<>();
        for(int answer : answers) {
            freq.put(answer + 1, freq.getOrDefault(answer + 1, 0) + 1);
        }
        //3 + 1 -> 5
        //4 + 1 -> 3
        //2 + 1 -> 2
        for(int key : freq.keySet()) {
            int val = freq.get(key);
            int q = val / key;
            int r = val % key;
             ans += q * key;
             if(r > 0) {
                ans += key;
             }
             System.out.println(key + " " + val + " " + ans);
        }
        return ans;
    }
}

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, new Comparator<int[]>() {

			@Override
			public int compare(int[] o1, int[] o2) {
				// TODO Auto-generated method stub
				return o1[0] - o2[0];
			}

		});

		List<int[]> ans = new ArrayList<>();

		for (int[] interval : intervals) {
			if (ans.isEmpty() || ans.get(ans.size() - 1)[1] < interval[0]) {
				ans.add(interval);
			} else {
				int[] newInterval = new int[2];
				newInterval[0] = ans.get(ans.size() - 1)[0];
				newInterval[1] = Math.max(ans.get(ans.size() - 1)[1], interval[1]);
				ans.set(ans.size() - 1, newInterval);
			}
		}

		return ans.toArray(new int[ans.size()][]);
    }
}

class Solution {
    public int findMinArrowShots(int[][] points) {
        List<int[]> ans = new ArrayList<>();
        Arrays.sort(points, (a , b) -> Integer.compare(a[0], b[0]));
        for(int[] point : points) {
            System.out.println(Arrays.toString(point));
            if(ans.size() == 0 || ans.get(ans.size() - 1)[1] < point[0]) {
                ans.add(point);
            } else {
                int start = Math.max(ans.get(ans.size() - 1)[0] , point[0]);
                int end = Math.min(ans.get(ans.size() - 1)[1], point[1]);
                int[] intervals = {start, end};
                ans.set(ans.size() - 1 , intervals);
            }
        }

        return ans.size();
    }
}

class Solution {
    public int eraseOverlapIntervals(int[][] points) {
        List<int[]> ans = new ArrayList<>();
        Arrays.sort(points, (a , b) -> Integer.compare(a[0], b[0]));
        for(int[] point : points) {
            
            if(ans.size() == 0 || ans.get(ans.size() - 1)[1] <= point[0]) {
                ans.add(point);
            } else {
                int start = Math.max(ans.get(ans.size() - 1)[0] , point[0]);
                int end = Math.min(ans.get(ans.size() - 1)[1], point[1]);
                int[] intervals = {start, end};
                ans.set(ans.size() - 1 , intervals);
            }
        }

        System.out.println(ans);
        return points.length - ans.size();
    }
}

